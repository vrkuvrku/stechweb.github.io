// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Infinity',
      desc: "moving path along an infinity shape. be sure to try larger length",
      tags: ['infinity', 'dash', 'line', 'curve', 'rotate', 'cycle'],
      slug: "infinity-rotate-cycle-loader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'stroke': '#e92',
        'width': 2,
        'dashLen': 2,
        'dasharray': '2.5658892822265624 2.5658892822265624',
        'dashoffset': '0;256.58892822265625'
      },
      id: 'infinity',
      license: 'CC0',
      support: {
        svg: true
      },
      edit: {
        stroke: {
          name: "Stroke Color",
          type: 'color',
          'default': '#e92'
        },
        width: {
          name: "Stroke Width",
          type: 'number',
          'default': 2,
          slider: {
            min: 0,
            max: 10
          }
        },
        dashLen: {
          name: "Dash Length",
          type: 'number',
          'default': 2,
          slider: {
            min: 0,
            max: 100
          }
        }
      },
      watch: function(n, o){
        var len, dlen1, dlen2, count;
        len = 256.58892822265625;
        if (n.dashLen >= 50) {
          dlen1 = len * n.dashLen * 0.01;
          dlen2 = len - dlen1;
        } else {
          dlen1 = len * n.dashLen * 0.01;
          count = Math.floor(len / dlen1);
          count = (count || 1) * 2;
          dlen1 = dlen2 = len / count;
        }
        n.dasharray = dlen1 + " " + dlen2;
        return n.dashoffset = "0;" + len, n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();